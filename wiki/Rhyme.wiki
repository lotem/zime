#summary ZIME核心算法庫

= ZIME核心算法庫 =

開發代號 平水韻／"Rhyme"

目前ZIME的核心算法用Python來編寫，與[IBusZIME ibus-zime]一同開發和發佈；
研製當中的[Weasel Windows版本]的核心算法也直接移植這部份代碼。
網頁版則是仿照這套算法用!JavaScript改寫的。

等到新版本的核心算法成熟、穩定之後，並且有熱心的朋友來幫忙，可以考慮用C++來重寫。

開發計劃：

  * 數據庫重構：實現獨立於具體拼寫方案的詞庫和語言模型
      * 重新引入「語言／Language」的概念
        * 「輸入方案－辭典－語言」的佈局
          * ZIME 3.x的數據庫結構是這樣的，每個辭典包括：
{{{
索引編碼（前N個音節） --(m..n)--> 詞語，完整編碼，系統詞頻，用戶詞頻
詞語一ID，詞語二ID --> 二元共現詞頻
}}}
          * 安裝輸入方案時，讀取含［詞語、詞頻、完整編碼］紀錄的文件，根據簡拼、模糊音規則的設置計算出詞語的索引編碼，用來在輸入時快速取出詞組。
      * 難點是多音字的處理
        * ZIME 3.x詞庫中的記錄是與拼寫相關的，多音字、多音詞存成多條紀錄，維護各自讀音的詞頻。新版本想要把與拼寫法相關的部份剝離出來，詞語的文字和詞頻信息由同一種語言的各個輸入方案來共享：
{{{
辭典（拼寫法相關）：
    索引編碼 --(m..n)--> 詞語ID，用戶詞頻（？問號甲）
語言（拼寫法無關）：
    詞語，系統詞頻
    詞語一ID，詞語二ID --> 二元共現詞頻
}}}
        * 難處是，多音字的各個讀音，要共用一條系統詞頻紀錄。得想辦法把這個詞頻做比較合理的分配。
      * 相應地，要更新ZIME輸入方案定義文件的規格
        * 把多音字的各個讀音列在一起，指派優先度
        * 支持標注部份（含多音字的）詞語的完整編碼

  * 調整排序策略，記入最末使用的時間因素
    * 研究排序的策略，最重要的決定性因素要放在拼寫法相關的辭典裡面，以免多音字的各個讀音相互影響。

  * 改進新詞的學習效果，以及提高新詞參與整句變換的能力
    * ZIME 3.x通過記錄二元共現詞頻來學習用戶新造的詞組；再打該詞時，計算得出該詞組。發現有時候，由三個單詞構成的用戶詞組算得的概率不足以成為首選，落後於某些無輸入記錄的組合。
    * 一方面檢討一下概率的計算方法，一方面把新詞加入詞庫中，根本地解決不能保證首選的問題。同時還增強了新詞作為一個單元參與未來的二元共現詞頻學習的能力。
  * 更精細的簡拼規則：去除影響全拼輸入的簡拼條目
    * ZIME 3.x拼音輸入a o e做簡拼，高頻的「安、偶」影響到「啊、喔」的輸入，要改，找到一般化的解決方法。

  * 更有效率的形碼詞庫索引：提高形碼的檢索效率，更好的形碼連打支持
    * 形碼之流，重碼率低，編碼種類多，像拼音那樣把一個字的編碼作為整體處理效率不高；改作以字母為單位，把編碼當作串來處理較好。

  * 以Enter鍵提交源輸入串（臨時輸入一些英文），而非提交以空格做音節切分後的拼音串（真正要輸出拼音的需求小）

參考：
  * [ZIMEArchitecture ZIME輸入法結構簡析]