#summary ZIME輸入方案開發者指南
#labels Featured,Phase-Support

= ZIME輸入方案開發者指南 =

== 綜述 ==

中州韻輸入平台／ZIME，提供了一些定製輸入方案的機制，使得輸入法設計者可以借助平台支持快速實現一款新的拼音輸入法。然而，這些機制不是提供給輸入法的最終用戶的，且要達到最大的靈活性、適應盡可能多的輸入法類型，故此不採取「傻瓜」的方式，而需要輸入方案開發者瞭解主要選項的作用、能夠使用平台提供的工具並具有文本處理的基礎技術能力，還要閱讀過本指南。

為平台定製多種類型的【輸入方案】，以實現搭載不同的輸入法。

ZIME輸入方案由【方案定義】文件、【單字表】和【詞庫】文件組成。輸入方案的原始碼為UTF-8編碼的文本文件，通過平台提供的工具完成配置，通用於桌面版和網頁版的中州韻平台。

== 瞭解輸入方案的構成 ==

【方案定義】，包含輸入方案的標識、名稱等各類選項。
輸入方案的標識，在平台內部用來唯一地確定一款輸入方案。依慣例用首字大寫（CamelCase）的文字表示。

【字典】，記錄編碼與字、詞的對應關係，以及詞頻等信息。
字典名依慣例用小寫（lower_case）的文字表示。

輸入方案與字典是多對一的關係。平台支持在字典中的編碼與輸入串之間建立映射機制，因此凡基於相同「音系」的輸入方案可共用一部字典。如：「全拼」和「雙拼」可共用一部字典；「注音」和「國語羅馬字」、「標調拼音」理論上也可共用一部字典。共用字典的作用，一是節約存儲空間，二是在輸入方案間共享用戶自造詞和用戶詞頻。
字典中的數據來自於【單字表】和【詞庫】文件。

單字表記錄全部單音節拼式與漢字的對應關係。在ZIME的設計中，此等單音節拼式，或可作「小韻」理解，稱作【鍵字】，其對應的漢字稱【單字】。單字未必是單個漢字：兒化韻以及方言中的合音詞，一個音節以兩個漢字表示，也要列入單字表。

鍵字的序列可稱【鍵】，相應的單字序列為【詞】。再加上詞頻，即構成詞庫中的條目。

平台提供一個工具，依單字表推導詞所對應的鍵，從而將一份帶詞頻的詞表標注為屬於特定字典的詞庫文件。也就是說，輸入方案的開發者只需要製作單字表，不必手工編寫詞庫文件。
不過鑑於含多音字的詞經自動標注會產生多餘的鍵，詞庫文件仍需人工審核方為精準。

多音字通常不用來組詞的字音，可在單字表中標示為【罕用音】，以減少生成的詞庫文件中不正確的條目。

以上文件的規格，參見文檔[http://code.google.com/p/zime/wiki/ZIMESchemaSpecificationV3 《ZIME輸入方案定義文件規格（第三版）》]。

== 解析方式與拼寫運算機制 ==

用戶的擊鍵動作，首先通過解析，得到編碼串；又經由拼寫運算機制轉換為用於查字典的鍵字的序列。

解析方式，設有「羅馬字」、「碼表」、「分組編碼」、「並擊」四種，通過方案定義中的Parser選項來指定。羅馬字解析方式，適用於與拼音相似的多數音碼；碼表解析方式，適用於編碼定長的雙拼及部份形碼；分組編碼解析方式適用於類似於注音的無序輸入；並擊解析方式適用於類似於速錄的多鍵並擊輸入。

解析所得的編碼串，可能包含多個音節拼式。從中解讀出的單個音節拼式，與字典中的索引鍵字做多對一的映射，以此實現拼寫法之間的變換以及拼寫形式的兼容；字典中的索引鍵字又可以與單字表中的鍵字做一對多的映射（導入字典時完成），以此實現模糊音、音序輸入等功能。此映射關係由方案定義中設置的拼寫運算選項來建立。

ZIME中的【拼寫運算】機制，乃是運用幾組正則表達式替換操作完成對鍵字的變換。

依施用的順序，由單字表中的原有鍵字到字典索引鍵字，依次應用【字典索引鍵字變換規則】和【字典索引鍵字模糊規則】。前者以替換後的形式取代原有鍵字，後者令替換結果與替換前鍵字等價，由此建立模糊音的一對多映射。

繼而，應用【輸入鍵字變換規則】、【輸入鍵字模糊規則】，實現輸入鍵字的種種變化。與最初兩組規則相倣，只是此處輸入鍵字模糊規則不能夠建立一對多的映射關係。

舉一例來說明。

設有單字表：
{{{
zhen	真
zheng	正
zeng	增
}}}
字典索引鍵字模糊規則：
{{{
^zh	z
eng$	en
en$	eng
}}}
輸入鍵字模糊規則：
{{{
ng$	gn
}}}
則有此輸入方案中全部合格拼式－字典索引鍵字－單字表中原有鍵字－單字選項的對應關係：
{{{
zhen	------>	zhen	------>	zhen, zheng	------>	真、正
zheng	------>	zhen	------>	zhen, zheng	------>	真、正
zhegn	------>	zhen	------>	zhen, zheng	------>	真、正
zen	------>	zen	------>	zhen, zheng, zeng	------>	真、正、增
zeng	------>	zen	------>	zhen, zheng, zeng	------>	真、正、增
zegn	------>	zen	------>	zhen, zheng, zeng	------>	真、正、增
}}}

== 實例講解製作ZIME輸入方案的步驟 ==

以下採用網頁體驗版Plume.js，演示如何編寫並配置新的ZIME輸入方案。

需要用到的材料有：

  * Plume.js 2.1 平台軟件
    由此下載：
    * http://zime.googlecode.com/files/plume-2.1.zip
  * Python腳本語言
    Windows使用者請自行安裝Python 2.6。
    * http://python.org/
  * 詞庫生成工具
    * http://zime.googlecode.com/svn/trunk/zime-data/make-phrases.py
    * http://zime.googlecode.com/svn/trunk/zime-data/phrases.txt
  * 部份ZIME輸入方案原始碼
    可由此獲取，視情況而選用。各實例中會給出用到的文件。
    * http://code.google.com/p/zime/source/browse/#svn/trunk/zime-data
  * 文本編輯器
    自備。當然要專業一點的，要能支持UTF-8編碼，最好要有正則表達式支持。

== 實例一 ==

=== 〇、方案簡介 ===

名為「打字速記」，是拼音的衍生方案。曾有個打字速記，用打字機上的符號簡短地記錄漢語的音節，我取其中的部份符號，在拼音的基礎上增設：
  * 符號 / - 略代韻母 an, (e)n
  * 簡記拼式較長的韻母
{{{
	A	E	I	O	U	V	v	Y	y	W	w
	ang	eng	ing	(i)ong	uen	yun	uei	iang	ian	uang	uan
}}}	
  * 用大寫字母代表結合了介音的聲母
{{{
	B	P	M	F	D	T	N	L
	bi	pi	mi	fei	di	ti	ni	li
	G	K	H	J	Q	X	Z	C	S	R
	gu	ku	hu	ju	qu	xu	zh	ch	sh	er
}}}
  * 省略某些音節的韻母部份
{{{
	b	p	m	f	d	t	n	l
	bu	pu	mu	fu	de	te	ne	le
	g	k	h	j	q	x	Z	C	S	z	c	s	r
	ge	ke	he	ji	qi	xi	zhi	chi	shi	zi	ci	si	ri
}}}

=== 一、開始幹活 ===

將 plume-2.1.zip 解壓縮後，得到一個名為 plume-2.1/ 的文件夾，其中又有個 data/ 文件夾。打開它。

由於此方案基於與拼音相同的音系（普通話），只是拼寫法有所變化，故此可以直接利用拼音的單字表和詞庫，在方案定義中增設一組鍵字變換規則即可。

下載拼音輸入方案的原始碼，置於文件夾 data/ 中。
  * http://zime.googlecode.com/svn/trunk/zime-data/Pinyin.txt
  * http://zime.googlecode.com/svn/trunk/zime-data/pinyin-keywords.txt
  * http://zime.googlecode.com/svn/trunk/zime-data/pinyin-phrases.txt


=== 二、編譯輸入方案 ===

下面運行平台提供的工具，把拼音輸入方案的原始碼編譯為軟件可直接讀取的形式，配置到平台中。
此工具為命令行腳本。Windows使用者可如此在 data/ 中新建一個簡短的批處理文件以方便使用：
{{{
rem shell.bat
set PATH=%PATH%;C:\Python26
cmd
}}}

在提示符下敲入命令
{{{
	python make-json.py -v Pinyin.txt
}}}
編譯拼音輸入方案，打字速記方案需要它的字典。

結果，在 plume-2.1/ 中生成了文件夾 json/ 。打開網頁 Plume.html，可見拼音配置好了。

至此我已演示了輸入方案應如何安裝。

=== 三、創建輸入方案定義文件 ===

在 data/ 內建立一個名為 Stenotype.txt 的文本文件。可以複製Pinyin.txt再來修改。
是的，我用Stenotype來做打字速記方案的標識。

選項中，Dict仍取與拼音相同的字典名pinyin。
特別要將Alphabet設置為本方案允許的所有字符。

完成後的Stenotype.txt在此：
  * http://zime.googlecode.com/svn/trunk/zime-data/Stenotype.txt

=== 四、編譯新方案 ===

以 -k 選項執行命令，保留已存在的字典，只將新的輸入方案配置到平台上。
{{{
	python make-json.py -k Stenotype.txt
}}}
編譯完成後Stenotype方案的相關數據文件出現在文件夾 plume-2.1/json/ 中。

大功告成。你也可以試試看喔。

== 實例二 ==

=== 〇、方案簡介 ===

名為「東風破」，乃名出蘭茂所著記錄明代官話的《韻畧易通》一書。佛振按此書的編排體例構擬一套「東風破」古韻拼寫法，製成字表。凡拼寫方音的羅馬字輸入方案皆可倣此定製。

佛振從維基文庫抓取《韻畧易通》文本，手工添加標記之後施展腳本功夫設法做成一個數據庫，最終得到此表，正可用於製作「東風破」輸入方案的單字表：
  * http://zime.googlecode.com/svn/trunk/zime-data/dungfungpuo/source/dfp-1234.txt

一、製作單字表

把那個 dfp-1234.txt 在 data/ 內複製一份，更名為 dungfungpuo-keywords.txt 。名字裡連字符之前的 dungfungpuo 就是本方案所使用的字典名啦。

用編輯器打開該文件，看，黃色條標記出的兩列分別就是單字表所需的單字和鍵字。用正則表達式一替換：
{{{
	s/^\d+\t(\S+).*\t([a-z]+)\d*$/$2\t$1/
}}}
東風破方案的單字表就編輯好了。

=== 二、編寫方案定義文件 ===

仍以Pinyin.txt為藍本，改得Dungfungpuo.txt。

Dict選項自然是設為dungfungpuo。Parser選項取roman，羅馬字解析方式。

最終的成果類似於：
  * http://zime.googlecode.com/svn/trunk/zime-data/dungfungpuo/Dungfungpuo.txt

=== 三、生成詞庫文件 ===

對於東風破這種沒有專門的詞庫，又想要快快做成好試驗一下效果的輸入方案，自動生成詞庫的功能實在是喜歡人。

下載詞庫生成工具，把 make-phrases.py 和 phrases.txt 也放到 data/ 裡頭。

好奇的你打開phrases.txt看看吧，就是記有詞頻的詞彙列表。佛振為測試需要，竊取了新酷音的詞庫，罪過罪過。你可用自己滿意的詞庫替換此文件的內容。

以字典名為參數執行命令，生成詞庫文件dungfungpuo-phrases.txt，含多音字的詞都以註釋標明了。
{{{
	python make-phrases.py dungfungpuo
}}}

=== 四、編譯輸入方案 ===

執行命令：
{{{
	python make-json.py -v Dungfungpuo.txt
}}}
做中。

為Linux桌面版中州韻輸入平台 ibus-zime 配置輸入方案的過程大體與此類似，只要將編譯命令中的 make-json.py 改為 create-schema.py 即可。